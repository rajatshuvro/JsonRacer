// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 4 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b
// command took 1.19s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b
// command took 1.94s and exited with 0
// ***** Done, took 00:00:03 (3.21 sec)   *****
// Found 4 benchmarks:
//   JsonSerializers.NewtonSoftSerializer: DefaultJob
//   JsonSerializers.Utf8JsonSerializer: DefaultJob
//   JsonSerializers.SystemTextJsonSerializer: DefaultJob
//   JsonSerializers.NirvanaJsonSerializer: DefaultJob

// **************************
// Benchmark: JsonSerializers.NewtonSoftSerializer: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.dll" --benchmarkName "JsonBenchmark.JsonSerializers.NewtonSoftSerializer" --job "Default" --benchmarkId 0 in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/bin/Release/netcoreapp3.1
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 3.1.2 (CoreCLR 4.700.20.6602, CoreFX 4.700.20.6702), X64 RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 311396.00 ns, 311.3960 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.
 ---> System.OutOfMemoryException: Insufficient memory to continue the execution of the program.
   at System.Text.StringBuilder.ExpandByABlock(Int32 minBlockCharCount)
   at System.Text.StringBuilder.Append(Char* value, Int32 valueCount)
   at System.Text.StringBuilder.AppendHelper(String value)
   at System.Text.StringBuilder.Append(String value)
   at JsonBenchmark.JsonSerializers.NewtonSoftSerializer() in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/JsonSerializers.cs:line 22
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionNoUnroll(Int64 invokeCount) in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.notcs:line 489
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineFactory.Jit(Engine engine, Int32 jitIndex, Int32 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName) in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.notcs:line 166
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.notcs:line 52
// AfterAll
ExitCode != 0
// Benchmark Process 65077 has exited with code 255
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: JsonSerializers.Utf8JsonSerializer: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.dll" --benchmarkName "JsonBenchmark.JsonSerializers.Utf8JsonSerializer" --job "Default" --benchmarkId 1 in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/bin/Release/netcoreapp3.1
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 3.1.2 (CoreCLR 4.700.20.6602, CoreFX 4.700.20.6702), X64 RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 423520.00 ns, 423.5200 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.
 ---> System.OutOfMemoryException: Insufficient memory to continue the execution of the program.
   at System.Text.StringBuilder.ExpandByABlock(Int32 minBlockCharCount)
   at System.Text.StringBuilder.Append(Char* value, Int32 valueCount)
   at System.Text.StringBuilder.AppendHelper(String value)
   at System.Text.StringBuilder.Append(String value)
   at JsonBenchmark.JsonSerializers.Utf8JsonSerializer() in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/JsonSerializers.cs:line 34
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionNoUnroll(Int64 invokeCount) in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.notcs:line 1221
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineFactory.Jit(Engine engine, Int32 jitIndex, Int32 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName) in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.notcs:line 898
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.notcs:line 52
// AfterAll
ExitCode != 0
// Benchmark Process 65489 has exited with code 255
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: JsonSerializers.SystemTextJsonSerializer: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.dll" --benchmarkName "JsonBenchmark.JsonSerializers.SystemTextJsonSerializer" --job "Default" --benchmarkId 2 in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/bin/Release/netcoreapp3.1
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 3.1.2 (CoreCLR 4.700.20.6602, CoreFX 4.700.20.6702), X64 RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 389096.00 ns, 389.0960 us/op
WorkloadJitting  1: 1 op, 358120037.00 ns, 358.1200 ms/op

WorkloadWarmup   1: 1 op, 252122864.00 ns, 252.1229 ms/op
WorkloadWarmup   2: 1 op, 262259222.00 ns, 262.2592 ms/op
WorkloadWarmup   3: 1 op, 267574985.00 ns, 267.5750 ms/op
WorkloadWarmup   4: 1 op, 241820539.00 ns, 241.8205 ms/op
WorkloadWarmup   5: 1 op, 252094768.00 ns, 252.0948 ms/op
WorkloadWarmup   6: 1 op, 256888254.00 ns, 256.8883 ms/op
WorkloadWarmup   7: 1 op, 252988896.00 ns, 252.9889 ms/op

// BeforeActualRun
WorkloadActual   1: 1 op, 263402565.00 ns, 263.4026 ms/op
WorkloadActual   2: 1 op, 258846523.00 ns, 258.8465 ms/op
WorkloadActual   3: 1 op, 243765477.00 ns, 243.7655 ms/op
WorkloadActual   4: 1 op, 278454357.00 ns, 278.4544 ms/op
WorkloadActual   5: 1 op, 250763805.00 ns, 250.7638 ms/op
WorkloadActual   6: 1 op, 252079882.00 ns, 252.0799 ms/op
WorkloadActual   7: 1 op, 246575380.00 ns, 246.5754 ms/op
WorkloadActual   8: 1 op, 239181682.00 ns, 239.1817 ms/op
WorkloadActual   9: 1 op, 243618772.00 ns, 243.6188 ms/op
WorkloadActual  10: 1 op, 257518678.00 ns, 257.5187 ms/op
WorkloadActual  11: 1 op, 262626760.00 ns, 262.6268 ms/op
WorkloadActual  12: 1 op, 275175789.00 ns, 275.1758 ms/op
WorkloadActual  13: 1 op, 253660316.00 ns, 253.6603 ms/op
WorkloadActual  14: 1 op, 248347384.00 ns, 248.3474 ms/op
WorkloadActual  15: 1 op, 242970896.00 ns, 242.9709 ms/op
WorkloadActual  16: 1 op, 249664140.00 ns, 249.6641 ms/op
WorkloadActual  17: 1 op, 249868984.00 ns, 249.8690 ms/op
WorkloadActual  18: 1 op, 257796177.00 ns, 257.7962 ms/op
WorkloadActual  19: 1 op, 263094473.00 ns, 263.0945 ms/op
WorkloadActual  20: 1 op, 243100812.00 ns, 243.1008 ms/op
WorkloadActual  21: 1 op, 247059573.00 ns, 247.0596 ms/op
WorkloadActual  22: 1 op, 254955086.00 ns, 254.9551 ms/op
WorkloadActual  23: 1 op, 256602130.00 ns, 256.6021 ms/op
WorkloadActual  24: 1 op, 253993389.00 ns, 253.9934 ms/op
WorkloadActual  25: 1 op, 243198822.00 ns, 243.1988 ms/op
WorkloadActual  26: 1 op, 243454788.00 ns, 243.4548 ms/op
WorkloadActual  27: 1 op, 245054476.00 ns, 245.0545 ms/op
WorkloadActual  28: 1 op, 254408744.00 ns, 254.4087 ms/op
WorkloadActual  29: 1 op, 253234921.00 ns, 253.2349 ms/op
WorkloadActual  30: 1 op, 246795875.00 ns, 246.7959 ms/op
WorkloadActual  31: 1 op, 240621030.00 ns, 240.6210 ms/op
WorkloadActual  32: 1 op, 244481710.00 ns, 244.4817 ms/op
WorkloadActual  33: 1 op, 253621978.00 ns, 253.6220 ms/op
WorkloadActual  34: 1 op, 282048317.00 ns, 282.0483 ms/op
WorkloadActual  35: 1 op, 265686521.00 ns, 265.6865 ms/op
WorkloadActual  36: 1 op, 249153613.00 ns, 249.1536 ms/op
WorkloadActual  37: 1 op, 246980166.00 ns, 246.9802 ms/op

// AfterActualRun
WorkloadResult   1: 1 op, 263402565.00 ns, 263.4026 ms/op
WorkloadResult   2: 1 op, 258846523.00 ns, 258.8465 ms/op
WorkloadResult   3: 1 op, 243765477.00 ns, 243.7655 ms/op
WorkloadResult   4: 1 op, 250763805.00 ns, 250.7638 ms/op
WorkloadResult   5: 1 op, 252079882.00 ns, 252.0799 ms/op
WorkloadResult   6: 1 op, 246575380.00 ns, 246.5754 ms/op
WorkloadResult   7: 1 op, 239181682.00 ns, 239.1817 ms/op
WorkloadResult   8: 1 op, 243618772.00 ns, 243.6188 ms/op
WorkloadResult   9: 1 op, 257518678.00 ns, 257.5187 ms/op
WorkloadResult  10: 1 op, 262626760.00 ns, 262.6268 ms/op
WorkloadResult  11: 1 op, 275175789.00 ns, 275.1758 ms/op
WorkloadResult  12: 1 op, 253660316.00 ns, 253.6603 ms/op
WorkloadResult  13: 1 op, 248347384.00 ns, 248.3474 ms/op
WorkloadResult  14: 1 op, 242970896.00 ns, 242.9709 ms/op
WorkloadResult  15: 1 op, 249664140.00 ns, 249.6641 ms/op
WorkloadResult  16: 1 op, 249868984.00 ns, 249.8690 ms/op
WorkloadResult  17: 1 op, 257796177.00 ns, 257.7962 ms/op
WorkloadResult  18: 1 op, 263094473.00 ns, 263.0945 ms/op
WorkloadResult  19: 1 op, 243100812.00 ns, 243.1008 ms/op
WorkloadResult  20: 1 op, 247059573.00 ns, 247.0596 ms/op
WorkloadResult  21: 1 op, 254955086.00 ns, 254.9551 ms/op
WorkloadResult  22: 1 op, 256602130.00 ns, 256.6021 ms/op
WorkloadResult  23: 1 op, 253993389.00 ns, 253.9934 ms/op
WorkloadResult  24: 1 op, 243198822.00 ns, 243.1988 ms/op
WorkloadResult  25: 1 op, 243454788.00 ns, 243.4548 ms/op
WorkloadResult  26: 1 op, 245054476.00 ns, 245.0545 ms/op
WorkloadResult  27: 1 op, 254408744.00 ns, 254.4087 ms/op
WorkloadResult  28: 1 op, 253234921.00 ns, 253.2349 ms/op
WorkloadResult  29: 1 op, 246795875.00 ns, 246.7959 ms/op
WorkloadResult  30: 1 op, 240621030.00 ns, 240.6210 ms/op
WorkloadResult  31: 1 op, 244481710.00 ns, 244.4817 ms/op
WorkloadResult  32: 1 op, 253621978.00 ns, 253.6220 ms/op
WorkloadResult  33: 1 op, 265686521.00 ns, 265.6865 ms/op
WorkloadResult  34: 1 op, 249153613.00 ns, 249.1536 ms/op
WorkloadResult  35: 1 op, 246980166.00 ns, 246.9802 ms/op
GC:  26 2 0 222044488 1
Threading:  3 0 1

// AfterAll
// Benchmark Process 65682 has exited with code 0

Mean = 251.467 ms, StdErr = 1.367 ms (0.54%), N = 35, StdDev = 8.090 ms
Min = 239.182 ms, Q1 = 244.768 ms, Median = 249.869 ms, Q3 = 255.779 ms, Max = 275.176 ms
IQR = 11.011 ms, LowerFence = 228.252 ms, UpperFence = 272.294 ms
ConfidenceInterval = [246.544 ms; 256.391 ms] (CI 99.9%), Margin = 4.924 ms (1.96% of Mean)
Skewness = 0.79, Kurtosis = 3.25, MValue = 2

// **************************
// Benchmark: JsonSerializers.NirvanaJsonSerializer: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.dll" --benchmarkName "JsonBenchmark.JsonSerializers.NirvanaJsonSerializer" --job "Default" --benchmarkId 3 in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/bin/Release/netcoreapp3.1
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 3.1.2 (CoreCLR 4.700.20.6602, CoreFX 4.700.20.6702), X64 RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 381970.00 ns, 381.9700 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.
 ---> System.OutOfMemoryException: Insufficient memory to continue the execution of the program.
   at System.Text.StringBuilder.ExpandByABlock(Int32 minBlockCharCount)
   at System.Text.StringBuilder.Append(Char* value, Int32 valueCount)
   at System.Text.StringBuilder.AppendHelper(String value)
   at System.Text.StringBuilder.Append(String value)
   at JsonBenchmark.JsonSerializers.NirvanaJsonSerializer() in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/JsonSerializers.cs:line 58
   at BenchmarkDotNet.Autogenerated.Runnable_3.WorkloadActionNoUnroll(Int64 invokeCount) in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.notcs:line 2685
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineFactory.Jit(Engine engine, Int32 jitIndex, Int32 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_3.Run(IHost host, String benchmarkName) in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.notcs:line 2362
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in /Users/rroy1/development/JsonBenchmark/JsonBenchmark/bin/Release/netcoreapp3.1/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b/c5fadfe1-df40-4f34-9bc5-5a4d8cde475b.notcs:line 52
// AfterAll
ExitCode != 0
// Benchmark Process 66963 has exited with code 255
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts/results/JsonBenchmark.JsonSerializers-report.csv
  BenchmarkDotNet.Artifacts/results/JsonBenchmark.JsonSerializers-report-github.md
  BenchmarkDotNet.Artifacts/results/JsonBenchmark.JsonSerializers-report.html

// * Detailed results *
JsonSerializers.NewtonSoftSerializer: DefaultJob
Runtime = ; GC = 
There are not any results runs

JsonSerializers.Utf8JsonSerializer: DefaultJob
Runtime = ; GC = 
There are not any results runs

JsonSerializers.NirvanaJsonSerializer: DefaultJob
Runtime = ; GC = 
There are not any results runs

JsonSerializers.SystemTextJsonSerializer: DefaultJob
Runtime = .NET Core 3.1.2 (CoreCLR 4.700.20.6602, CoreFX 4.700.20.6702), X64 RyuJIT; GC = Concurrent Workstation
Mean = 251.467 ms, StdErr = 1.367 ms (0.54%), N = 35, StdDev = 8.090 ms
Min = 239.182 ms, Q1 = 244.768 ms, Median = 249.869 ms, Q3 = 255.779 ms, Max = 275.176 ms
IQR = 11.011 ms, LowerFence = 228.252 ms, UpperFence = 272.294 ms
ConfidenceInterval = [246.544 ms; 256.391 ms] (CI 99.9%), Margin = 4.924 ms (1.96% of Mean)
Skewness = 0.79, Kurtosis = 3.25, MValue = 2
-------------------- Histogram --------------------
[235.936 ms ; 242.816 ms) | @@
[242.816 ms ; 249.308 ms) | @@@@@@@@@@@@@@
[249.308 ms ; 257.215 ms) | @@@@@@@@@@@
[257.215 ms ; 263.707 ms) | @@@@@@
[263.707 ms ; 271.930 ms) | @
[271.930 ms ; 278.422 ms) | @
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.12.1, OS=macOS Catalina 10.15.6 (19G2021) [Darwin 19.6.0]
Intel Core i9-9880H CPU 2.30GHz, 1 CPU, 16 logical and 8 physical cores
.NET Core SDK=3.1.102
  [Host]     : .NET Core 3.1.2 (CoreCLR 4.700.20.6602, CoreFX 4.700.20.6702), X64 RyuJIT
  DefaultJob : .NET Core 3.1.2 (CoreCLR 4.700.20.6602, CoreFX 4.700.20.6702), X64 RyuJIT


|                   Method |     Mean |   Error |  StdDev | Ratio | RatioSD | Rank |      Gen 0 |     Gen 1 | Gen 2 |   Allocated |
|------------------------- |---------:|--------:|--------:|------:|--------:|-----:|-----------:|----------:|------:|------------:|
|     NewtonSoftSerializer |       NA |      NA |      NA |     ? |       ? |    ? |          - |         - |     - |           - |
|       Utf8JsonSerializer |       NA |      NA |      NA |     ? |       ? |    ? |          - |         - |     - |           - |
|    NirvanaJsonSerializer |       NA |      NA |      NA |     ? |       ? |    ? |          - |         - |     - |           - |
| SystemTextJsonSerializer | 251.5 ms | 4.92 ms | 8.09 ms |     ? |       ? |    1 | 26000.0000 | 2000.0000 |     - | 222044488 B |

Benchmarks with issues:
  JsonSerializers.NewtonSoftSerializer: DefaultJob
  JsonSerializers.Utf8JsonSerializer: DefaultJob
  JsonSerializers.NirvanaJsonSerializer: DefaultJob

// * Warnings *
BaselineCustomAnalyzer
  Summary -> A question mark '?' symbol indicates that it was not possible to compute the (Ratio, RatioSD) column(s) because the baseline value is too close to zero.

// * Hints *
Outliers
  JsonSerializers.SystemTextJsonSerializer: Default -> 2 outliers were removed (278.45 ms, 282.05 ms)

// * Legends *
  Mean      : Arithmetic mean of all measurements
  Error     : Half of 99.9% confidence interval
  StdDev    : Standard deviation of all measurements
  Ratio     : Mean of the ratio distribution ([Current]/[Baseline])
  RatioSD   : Standard deviation of the ratio distribution ([Current]/[Baseline])
  Rank      : Relative position of current benchmark mean among all benchmarks (Arabic style)
  Gen 0     : GC Generation 0 collects per 1000 operations
  Gen 1     : GC Generation 1 collects per 1000 operations
  Gen 2     : GC Generation 2 collects per 1000 operations
  Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B)
  1 ms      : 1 Millisecond (0.001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:03:57 (237.78 sec), executed benchmarks: 4

Global total time: 00:04:00 (241 sec), executed benchmarks: 4
// * Artifacts cleanup *
